Explanation of the design of the core_dev handler()
-----------------------------------------------

WIP - still in draft

//core handler - always exists in a core_dev project

$h = new handler();


=== database driver ===
$h->db('mysqli', $config['db']);

These drivers handles connections & queries to SQL databases.

Available drivers:

  mysqli - the preferred driver
  mysql - older & slower mysql database driver
  postgresql - FIXME unfinished
  sqlite - FIXME unfinished

New drivers must implement the db_base.php interface



=== user driver ===
$h->user('default');

These drivers handles registering & unregistering of user accounts.

Available drivers:
  default - uses tblUsers to store user data

  application defined - for m2w, lookup directly in tblCallers and dont use tblUsers

New drivers must implement the user_base.php interface



=== auth driver ===
$h->auth('default', $config['auth']);

Available drivers:
  default - built in authentication handler for http requests
            (store data in tblUsers - XXX use $session->user
            functions to abstract underlying DB which is
            currently using tblUsers)

  recaptcha - use default handler with recaptcha for user registration
            TODO: not created yet

  openid - XXX how? openid against multiple sites
            (just store openid provider?)

  application defined - for m2w (XXX create)


New drivers must implement the auth_base.php interface



=== session driver ===
$h->session('default', $config['session']);

Available drivers:
  default - built in session handler for web server access with http requests

New drivers must implement the session_base.php interface



=== files driver ===
$h->files('default', $config['files']);

Available drivers:
  default - uses tblFiles

(XXX what functions is required?)



--------------------

XXX ability for additional classes to be registerd that attach their own
	functions, such as: theming (currently $session->default_theme etc)

	or recaptcha hooking on to register form function (???)

XXX eventually a class for fine-grained user access?
    default implements the normal/admin/superadmin thing?
