"are you a human" implementation:
---------------------------------
todo: flera typer av svar. t'ex "välj vilken av bilderna som är en clown", eller två/tre-vals radioknapp-svarsalternativ


This is a description of how the "are you human" test that is used in
core_dev is implemented.

This is typically used to validate form input from unregistered users on
a blog post, news article or similar on the web today.
The problem is that there are many "spam bots", programs created to
automatically post advertisment and spam in web forms.

When the function is activated, upon the initial page creation a img tag
is created with a random number (by client-side javascript choice) pointing
to the api/human_test.php API. Example:

<script type="text/javascript">
	var r=Math.floor(Math.random()*100000000);
	document.write('<img src="/core_dev/api/human_test.php?r=' + r + '&pr=sample"/>');
	document.write('<form method="post" action="/core_dev/api/human_test.php?r=' + r + '&pr=sample">');
	document.write('<input type="text" name="v"/>');
	document.write('</form>');
</script>

This will display a image with a very simple question written on it.
The text used to print the question are slightly distored in random ways, to make it
harder for programs to use OCR techniques to circumvent the system.

The user must answer by input.

Examples:
	"what is 2 + 3"						answer: 5
	"how is moon spelled"			answer: moon

When human_test.php is called, the server randoms a question & decides it's answer. 
Then it creates a table entry with timestamp and the random number & answer.
Finally it displays the answer to the question in form of image output in the browser.

The user then inputs the answer to the form
